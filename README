giladam, jonathanzd
200139814, 204620835
Gil Adam, Jonathan Zedaka

I discussed the exercise with: []

====================================
=  README for ex12: Four In A Row  =
====================================

A Tkinter based GUI implementation of the famous 'Four In A Row' game.
Game is played by running two instances of 'four_in_a_row.py' (either on the same machine or on two machines on the
same network). Instances are run from command line by calling:

python3 four_in_a_row.py <player> <port> <ip>

<player> is either 'human' or 'ai' and configures game mode to be manual or automatic.
<port> is the port to communicate through (maximum 65535, recommended around 8000)
<ip> is the ip address of the machine running the instance to connect to (first instance is created with no ip
argument given, and the second connects to it).

============
=  Files:  =
============

1. four_in_a_row.py
2. game.py
3. screen.py
4. communicator.py
5. folder: gui (contains images for GUI)

* All files can be found in the GitHub repository: https://github.com/fuzzylemur/ex12

==============
=  Classes:  =
==============

Implementation includes the following classes:

- FourInARow:       The high level application object, handling game events, turn order and legality, communication
                    between instances and controlling the objects that manage GUI, gameplay and AI.
                    four_in_a_row.py includes the main function for getting arguments from command line and initiating
                    the game instance.

- Game:             The object representing the game board, handling current game state, making moves on the board and
                    checking for game end conditions.

- Screen:           GUI object using Tkinter library. Handles the graphical display of the game, updating moves,
                    human user input, displaying messages for invalid moves and the result at game end.
                    Assumes a local folder named 'gui' with game element images, Tkinter and PIL libraries.

- Communicator:     Object handling the non-blocking communication between game instances, initiating and connecting,
                    sending and receiving messages. (Implemented by the wonderful HUJI CS crew)

- AI:               AI object is responsible for deciding on game moves when game instance is defined to be AI.
                    A move is done by AI when the method find_legal_move(game, function) is called, given a Game
                    object and a function to be called with the move chosen by the algorithm.
                    Also implemented in ai.py is a simple class for Node objects (as AI utilises a search tree).

===================
=  AI Algorithm:  =
===================

For the AI algorithm we chose to implement a version of 'Monte Carlo Tree Search' (informally nicknamed 'Jericho Palm
Tree Casino'). Our algorithm builds a tree of possible game moves from the current game state. Each node
in the tree represents a game turn and has up to 7 children nodes (0 if it represents a game which has ended) and an
numerical score value signifying the AI player's position strength at that state (Positive: winning, Negative: losing).
Each branch of the tree is created by a linear recursion picking one random possible move at each node, until reaching
a game end, then updates the leaf score based on outcome (win:+1, lose:-1, draw:0) and backtracks in the recursion
to update the scores of the nodes leading to that leaf. When back-propagating the result each node adds to its score
the value returned from the child node and returns to its parent node that value divided by 2. In that way more
significance is given in the score to outcomes that are closer to the current game state. Numerous branches are
created iteratively by build_tree function, the longer this function runs it samples a bigger section of the search
space so that node scores should represent a more precise forecast for the preferable next move.
